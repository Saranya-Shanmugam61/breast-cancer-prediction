import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
file_path = "/content/BreastCancer2.csv"
data = pd.read_csv(file_path)
print("Dataset Overview:")
print(data.describe(include='all').transpose())
drop_columns = [col for col in data.columns if 'Unnamed' in col or data[col].nunique() == 1]
data.drop(columns=drop_columns, inplace=True)
missing_values = data.isnull().sum()
if missing_values.sum() > 0:
    print("\nMissing Values Detected:")
    print(missing_values[missing_values > 0])
    numeric_columns = data.select_dtypes(include=['float64', 'int64']).columns
    imputer = SimpleImputer(strategy="mean")
    data[numeric_columns] = imputer.fit_transform(data[numeric_columns])
else:
    print("\nNo missing values detected.")
data['diagnosis'] = data['diagnosis'].map({'B': 0, 'M': 1})  # Binary mapping for target
X = data.drop(columns=['id', 'diagnosis'])
y = data['diagnosis']
scaler = StandardScaler()
X_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)
plt.figure(figsize=(8, 6))
sns.countplot(x=y, palette="Set2")
plt.title("Diagnosis Distribution")
plt.xlabel("Diagnosis (0: Benign, 1: Malignant)")
plt.ylabel("Count")
plt.show()
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.25, random_state=42, stratify=y)
plt.figure(figsize=(12, 10))
sns.heatmap(X_train.corr(), cmap="coolwarm", annot=False, linewidths=0.5, square=True)
plt.title("Correlation Heatmap")
plt.show()
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 5, 10],
    'min_samples_split': [2, 4, 8],
    'min_samples_leaf': [1, 2, 3]
}

rf_model = RandomForestClassifier(random_state=42)
grid_search = GridSearchCV(
    estimator=rf_model,
    param_grid=param_grid,
    scoring='accuracy',
    cv=5,
    verbose=2,
    n_jobs=-1
)
grid_search.fit(X_train, y_train)
print("\nOptimized Hyperparameters:")
print(grid_search.best_params_)
best_model = grid_search.best_estimator_
model_filename = "optimized_breast_cancer_model.pkl"
with open(model_filename, "wb") as file:
    pickle.dump(best_model, file)

with open(model_filename, "rb") as file:
    loaded_model = pickle.load(file)

print(f"\nModel saved and loaded successfully as {model_filename}.")
y_pred = loaded_model.predict(X_test)
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=["Benign", "Malignant"]))

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, cmap="Blues", fmt="d", cbar=False, xticklabels=["Benign", "Malignant"], yticklabels=["Benign", "Malignant"])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()
feature_importances = pd.Series(best_model.feature_importances_, index=X.columns).sort_values(ascending=False)
plt.figure(figsize=(14, 8))
sns.barplot(y=feature_importances.index, x=feature_importances.values, palette="mako", edgecolor="black")
plt.title("Feature Importances")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()
accuracy = accuracy_score(y_test, y_pred)
print(f"\nFinal Model Accuracy: {accuracy:.2%}")
